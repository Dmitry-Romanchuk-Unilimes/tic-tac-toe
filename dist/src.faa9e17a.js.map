{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"src.faa9e17a.js","sourceRoot":"..","sourcesContent":["import \"./style.css\";\n\nconst appElement = document.getElementById(\"app\");\nconst boardElement = document.getElementById(\"board\");\nconst ROW_COUNT = 3;\nconst COL_COUNT = 3;\n\ntype Cell = \"\" | \"X\" | \"O\";\ntype TicTacToeBoard = [\n  [Cell, Cell, Cell],\n  [Cell, Cell, Cell],\n  [Cell, Cell, Cell]\n];\nlet boardState: TicTacToeBoard = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"]\n];\nlet currentMove: \"X\" | \"O\" = \"X\";\n\nlet winner: Cell | \"Draw\" = \"\";\n\nfunction createCell(row: number, col: number, content: Cell = \"\") {\n  const cell = document.createElement(\"button\");\n  cell.setAttribute(\"data-row\", row.toString());\n  cell.setAttribute(\"data-col\", col.toString());\n  cell.setAttribute(\"data-content\", content);\n  cell.classList.add(\"cell\");\n\n  cell.addEventListener(\"click\", () => {\n    if (winner) return;\n    if (boardState[row][col] === \"\") {\n      boardState[row][col] = currentMove;\n      currentMove = currentMove === \"X\" ? \"O\" : \"X\";\n      winner = checkBoard();\n      renderBoard();\n    }\n  });\n  return cell;\n}\n\ntype Coordinate = [number, number];\ntype Victory = [Coordinate, Coordinate, Coordinate];\nconst victories: Victory[] = [\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2]\n  ],\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2]\n  ],\n  [\n    [2, 0],\n    [2, 1],\n    [2, 2]\n  ],\n  [\n    [0, 0],\n    [1, 0],\n    [2, 0]\n  ],\n  [\n    [0, 1],\n    [1, 1],\n    [2, 1]\n  ],\n  [\n    [0, 2],\n    [1, 2],\n    [2, 2]\n  ],\n  [\n    [0, 0],\n    [1, 1],\n    [2, 2]\n  ],\n  [\n    [2, 0],\n    [1, 1],\n    [0, 2]\n  ],\n]\n\nfunction checkBoard(): Cell | 'Draw' {\n  for(let victory of victories) {\n    const cell1 = boardState[victory[0][0]][victory[0][1]];\n    const cell2 = boardState[victory[1][0]][victory[1][1]];\n    const cell3 = boardState[victory[2][0]][victory[2][1]];\n    if(cell1 !== '' && cell1 === cell2 && cell1 === cell3) {\n      return cell1;\n    }\n  }\n  let isDraw = true;\n  for (let i = 0; i < ROW_COUNT; i++) {\n    for (let j = 0; j < COL_COUNT; j++) {\n      if (boardState[i][j] === '') isDraw = false;\n    }\n  }\n\n  if (isDraw) return 'Draw';\n  return '';\n}\n\nfunction renderBoard() {\n  if (!appElement) throw new Error(\"Cannot find app\");\n  if (!boardElement) throw new Error(\"Cannot find board\");\n  boardElement.innerHTML = \"\";\n  for (let i = 0; i < ROW_COUNT; i++) {\n    for (let j = 0; j < COL_COUNT; j++) {\n      boardElement.appendChild(createCell(i, j, boardState[i][j]));\n    }\n  }\n  const oldMoveElement = document.getElementById(\"move-element\");\n  if (oldMoveElement) {\n    oldMoveElement.remove();\n  }\n  const moveElement = document.createElement(\"p\");\n  moveElement.id = \"move-element\";\n  moveElement.innerText = winner ? `Winner: ${winner}` : `Next Move: ${currentMove}`;\n  moveElement.classList.add(\"current-move\");\n  appElement.insertBefore(moveElement, document.getElementById(\"reset\"));\n}\n\nfunction init() {\n  const resetButton = document.getElementById(\"reset\");\n  if (!resetButton) throw new Error(\"No Reset button\");\n  resetButton.addEventListener(\"click\", () => {\n    boardState = [\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"]\n    ];\n    currentMove = \"X\";\n    winner = '';\n    renderBoard();\n  });\n  renderBoard();\n}\n\ninit();\n"]}